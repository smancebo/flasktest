function machineService(e,n){function t(e,t){return n.post(a+"/machine/add",e)}function i(){return n.get(a+"/machine/list")}function c(e){return n.get(a+"/machine/get/"+e)}var a=e.api;return{addMachine:t,getMachinelist:i,getMachine:c}}function alertsService(e){function n(e,n){}function t(e,n){}return{show:n,confirm:t}}!function(){function e(e,n){n.otherwise("/"),e.state("home",{url:"/",templateUrl:"remote_exec/remote_exec.html",controller:"remoteExecController",controllerAs:"$ctrl"})}e.$inject=["$stateProvider","$urlRouterProvider"];var n=angular.module("flaskApp",["ui.router","templates","ui.bootstrap"]);n.config(e),n.constant("$config",{api:"http://10.172.0.167:5000"})}();var app=angular.module("flaskApp");app.factory("machineService",machineService),machineService.$inject=["$config","$http"];var app=angular.module("flaskApp");app.factory("$alerts",alertsService),alertsService.$inject=["$uibModal"],function(){"use strict";function e(e,n,t){var i=this;t.getMachinelist().then(function(e){i.machineList=e.data}),i.openAddMachine=function(){function e(e,n){var c=this;void 0!==n?(c.info=n,c.edit=!0):(c.info={},c.edit=!1),c.addMachine=function(){t.addMachine(c.info).then(function(){t.getMachinelist().then(function(n){i.machineList=[],i.machineList=n.data,e.dismiss("cancel")})})},c.cancel=function(){e.dismiss("cancel")}}e.$inject=["$uibModalInstance","info"];var c=n.open({animation:!0,templateUrl:"remote_exec/addmachine.html",controller:e,controllerAs:"$modalCtrl",resolve:{info:function(){return i.info}}});c.closed.then(function(){i.info={}})},i.editMachine=function(e){t.getMachine(e._id).then(function(e){i.info=e.data,i.edit=!0,i.openAddMachine()})}}var n=angular.module("flaskApp");n.controller("remoteExecController",e),e.$inject=["$scope","$uibModal","machineService"]}();
//# sourceMappingURL=data:application/json;base64,
